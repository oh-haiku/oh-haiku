/**
 * @author Jesper Josefsson
 */

package com.ohhaiku.models;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.j256.ormlite.field.DataType;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;

/*
 * A poem holds a three line poem.
 * A poem is a candidate Haiku.
 */
@DatabaseTable
public class Poem implements Serializable {
  private static final long serialVersionUID = -724565731711438L;
  @DatabaseField(generatedId = true)
  private Integer id;
  
  private ArrayList<String> lines;
  
  /*
   * The following fields are only used for ORMLite
   * We want to persist the lines in the arraylist as three separate strings
   * but ORMLite only allows annotation of fields.
   * By using the useGetSet option, we can define getters and setters
   * that fetch the string from the ArrayList.
   * Hence, these fields are never actually used.
   */
  @SuppressWarnings("unused")
  @DatabaseField(useGetSet = true)
  private String line0;
  @SuppressWarnings("unused")
  @DatabaseField(useGetSet = true)
  private String line1;
  @SuppressWarnings("unused")
  @DatabaseField(useGetSet = true)
  private String line2;
  
  public Poem()
  {
    // To avoid problems with index bounds, we initiate the Poem with empty strings
    lines = new ArrayList<String>(Arrays.asList(new String[]{"", "", ""}));
  }
  
  public Poem(String[] lines) 
  {
    if (lines.length != 3) {
      throw new IllegalArgumentException("Argument did not contain 3 lines");
    }
    else {
      this.lines = new ArrayList<String>(Arrays.asList(lines));
    }
  }
  
  public void setLine(int n, String content)
  {
    lines.set(n, content);
  }
  
  public String getLine(int n)
  {
    return lines.get(n);
  }
  
  public List<String> getLines()
  {
    return getLinesAsList();
  }
  
  public List<String> getLinesAsList()
  {
    return lines;
  }
  
  public String[] getLinesAsArray()
  {
    return this.lines.toArray(new String[3]);
  }

  public String toString() {
    String output = "";
    for (int i = 0; i < 2; i++) {
      output += lines.get(i) + "\n";
    }
    output += lines.get(2);
    return output;
  }


  
  /*
   * Generated by Eclipse
   */
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
    result = prime * result + ((lines == null) ? 0 : lines.hashCode());
    return result;
  }
  
  /*
   * Generated by Eclipse
   */
  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Poem other = (Poem) obj;
    if (getId() == null) {
      if (other.getId() != null)
        return false;
    } else if (!getId().equals(other.getId()))
      return false;
    if (lines == null) {
      if (other.lines != null)
        return false;
    } else if (!lines.equals(other.lines))
      return false;
    return true;
  }

  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public String getLine0() {
    return lines.get(0);
  }

  public void setLine0(String line0) {
    this.setLine(0, line0);
  }

  public String getLine1() {
    return lines.get(1);
  }

  public void setLine1(String line1) {
    this.setLine(1, line1);
  }

  public String getLine2() {
    return lines.get(2);
  }

  public void setLine2(String line2) {
    this.setLine(2, line2);
  }
  
}
